# -*- coding: utf-8 -*-
"""assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zllErTOOKlWoTHmFLtxG1LpjhvR3Jf8p
"""

import requests

import pandas as pd
import requests

# Step 1: Fetch data from the API
url = "https://api.themoviedb.org/3/movie/top_rated?api_key=8265bd1679663a7ea12ac168da84d2e8&language=en-US&page=1"  # Replace with the actual API URL
response = requests.get(url)
data = response.json()  # Assuming the API returns a JSON response
print("Movies fetched successfully")
df = pd.DataFrame(data)
print(df)

import requests

# Provided URLs for the Movie API and Genre API
movie_api_url = "https://api.themoviedb.org/3/movie/top_rated?api_key=8265bd1679663a7ea12ac168da84d2e8&language=en-US&page=1"
genre_api_url = "https://api.themoviedb.org/3/genre/movie/list?api_key=8265bd1679663a7ea12ac168da84d2e8&language=en-US"

# Function to fetch movie data
def fetch_movie_data():
    response = requests.get(movie_api_url)
    if response.status_code == 200:
        return response.json()
    else:
        return None

# Function to fetch genre data
def fetch_genre_data():
    response = requests.get(genre_api_url)
    if response.status_code == 200:
        return response.json()
    else:
        return None

# Function to map genre ids to genre names
def map_genre_names(genre_ids, genre_data):
    genre_names = []
    genre_dict = {genre['id']: genre['name'] for genre in genre_data['genres']}

    for genre_id in genre_ids:
        genre_names.append(genre_dict.get(genre_id, 'Unknown'))

    return genre_names

# Main function to process and display the movie and genre data
def display_movies():
    # Fetch movie data
    movie_data = fetch_movie_data()
    if not movie_data:
        print("Error fetching movie data")
        return

    # Fetch genre data
    genre_data = fetch_genre_data()
    if not genre_data:
        print("Error fetching genre data")
        return

    # Display movie information with genre names
    print("Top Rated Movies:")
    for movie in movie_data['results']:
        title = movie['title']
        release_date = movie['release_date']
        vote_average = movie['vote_average']
        genre_ids = movie['genre_ids']
        genre_names = map_genre_names(genre_ids, genre_data)

        print(f"\nTitle: {title}")
        print(f"Release Date: {release_date}")
        print(f"Rating: {vote_average}")
        print(f"Genres: {', '.join(genre_names)}")
        print(f"Overview: {movie['overview']}")
        print("-" * 50)

# Call the main function to display the movie list
if __name__ == "__main__":
    display_movies()

import requests
import pandas as pd

# Provided URLs for the Movie API and Genre API
movie_api_url = "https://api.themoviedb.org/3/movie/top_rated?api_key=8265bd1679663a7ea12ac168da84d2e8&language=en-US&page=1"
genre_api_url = "https://api.themoviedb.org/3/genre/movie/list?api_key=8265bd1679663a7ea12ac168da84d2e8&language=en-US"

# Function to fetch movie data
def fetch_movie_data():
    response = requests.get(movie_api_url)
    if response.status_code == 200:
        return response.json()
    else:
        return None

# Function to fetch genre data
def fetch_genre_data():
    response = requests.get(genre_api_url)
    if response.status_code == 200:
        return response.json()
    else:
        return None

# Function to map genre ids to genre names
def map_genre_names(genre_ids, genre_data):
    genre_names = []
    genre_dict = {genre['id']: genre['name'] for genre in genre_data['genres']}

    for genre_id in genre_ids:
        genre_names.append(genre_dict.get(genre_id, 'Unknown'))

    return genre_names

# Main function to process and return the movie data as a DataFrame
def get_movie_dataframe():
    # Fetch movie data
    movie_data = fetch_movie_data()
    if not movie_data:
        print("Error fetching movie data")
        return None

    # Fetch genre data
    genre_data = fetch_genre_data()
    if not genre_data:
        print("Error fetching genre data")
        return None

    # Prepare lists to hold movie details
    movie_titles = []
    genres = []
    overviews = []

    # Collect movie data and corresponding genre names
    for movie in movie_data['results']:
        title = movie['title']
        genre_ids = movie['genre_ids']
        genre_names = map_genre_names(genre_ids, genre_data)
        overview = movie['overview']

        movie_titles.append(title)
        genres.append(', '.join(genre_names))  # Combine multiple genres into a single string
        overviews.append(overview)

    # Create a DataFrame with the movie data
    movie_df = pd.DataFrame({
        'Title': movie_titles,
        'Genres': genres,
        'Overview': overviews
    })

    return movie_df

# Call the function to get the DataFrame and print it
if __name__ == "__main__":
    movie_df = get_movie_dataframe()
    if movie_df is not None:
        print(movie_df)

movie_df.to_csv('top_rated_movies.csv', index=False)

import requests
import pandas as pd

# Provided URLs for the Movie API and Genre API
movie_api_url = "https://api.themoviedb.org/3/movie/top_rated?api_key=8265bd1679663a7ea12ac168da84d2e8&language=en-US&page="
genre_api_url = "https://api.themoviedb.org/3/genre/movie/list?api_key=8265bd1679663a7ea12ac168da84d2e8&language=en-US"

# Function to fetch movie data for a given page
def fetch_movie_data(page):
    response = requests.get(f"{movie_api_url}{page}")
    if response.status_code == 200:
        return response.json()
    else:
        return None

# Function to fetch genre data
def fetch_genre_data():
    response = requests.get(genre_api_url)
    if response.status_code == 200:
        return response.json()
    else:
        return None

# Function to map genre ids to genre names
def map_genre_names(genre_ids, genre_data):
    genre_names = []
    genre_dict = {genre['id']: genre['name'] for genre in genre_data['genres']}

    for genre_id in genre_ids:
        genre_names.append(genre_dict.get(genre_id, 'Unknown'))

    return genre_names

# Main function to process and return the movie data as a DataFrame
def get_movie_dataframe():
    # Fetch genre data
    genre_data = fetch_genre_data()
    if not genre_data:
        print("Error fetching genre data")
        return None

    # Prepare lists to hold movie details
    movie_titles = []
    genres = []
    overviews = []

    # Loop through all 400 pages (1 to 400)
    total_pages = 471  # You can adjust this if needed based on available pages in the API
    for page in range(1, total_pages + 1):
        print(f"Fetching data for page {page} of {total_pages}...")

        # Fetch movie data for the current page
        movie_data = fetch_movie_data(page)
        if not movie_data:
            print(f"Error fetching data for page {page}")
            continue  # Skip to the next page if there's an error

        # Collect movie data and corresponding genre names
        for movie in movie_data['results']:
            title = movie['title']
            genre_ids = movie['genre_ids']
            genre_names = map_genre_names(genre_ids, genre_data)
            overview = movie['overview']

            movie_titles.append(title)
            genres.append(', '.join(genre_names))  # Combine multiple genres into a single string
            overviews.append(overview)

    # Create a DataFrame with the movie data
    movie_df = pd.DataFrame({
        'Title': movie_titles,
        'Genres': genres,
        'Overview': overviews
    })

    return movie_df

# Call the function to get the DataFrame and print it
if __name__ == "__main__":
    movie_df = get_movie_dataframe()
    if movie_df is not None:
        print(f"Data fetched successfully! Total movies fetched: {len(movie_df)}")
        print(movie_df.head())  # Show the first few rows of the DataFrame
        # Optionally save the dataframe to a CSV file
        movie_df.to_csv("top_rated_movies_all_pages.csv", index=False)
        print("Data saved to 'top_rated_movies_all_pages.csv'")